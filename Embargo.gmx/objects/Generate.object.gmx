<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Globals()
SectorGeneration()

instance_create(x,y,obj_Camera)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MoveControl()

ii = instance_nearest(mouse_x,mouse_y,Node)

if point_distance(ii.x,ii.y,mouse_x,mouse_y) &lt; 25
{
    hover = ii
}
else
{
    hover = noone
}

if keyboard_check_pressed(vk_escape)
{
    global.selectedNode = noone
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tempNode = instance_nearest(mouse_x,mouse_y,Node)


//check if the click is close to a planet and if you can move to that planet
if(point_distance(mouse_x,mouse_y,tempNode.x,tempNode.y)&lt;20  &amp;&amp; global.selectedFleet.position == global.selectedNode &amp;&amp; tempNode.numFleetsPresent&lt;global.MAX_FLEETS){
    for (var i = 0; i &lt; tempNode.numConnections; i++){
        if (tempNode.connections[i] == global.selectedNode){
        
        //pop the fleet from the planet
            for (var j = 0; j &lt; global.selectedNode.numFleetsPresent; j++){
                if(global.selectedNode.fleetsPresent[j] == global.selectedFleet){
                    fleetTemp = global.selectedNode.fleetsPresent[j]
                    global.selectedNode.fleetsPresent[j] = global.selectedNode.fleetsPresent[global.selectedNode.numFleetsPresent - 1]
                    global.selectedNode.fleetsPresent[global.selectedNode.numFleetsPresent - 1] = fleetTemp
                    global.selectedNode.numFleetsPresent--
                }
            }
        }
    }
    
//move the fleet
    global.selectedFleet.position = tempNode
    tempNode.fleetsPresent[tempNode.numFleetsPresent] = global.selectedFleet
    tempNode.numFleetsPresent++
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>planetSelect</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DrawHUD()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hover != noone
{
    with(hover)
    {
        draw_set_colour(c_white)
        for (var i = 0;i &lt; numConnections;i++){
            if(connections[i] == global.selectedNode){
                draw_set_colour(c_lime)
            }
            draw_line(x,y,connections[i].x,connections[i].y)
            draw_set_colour(c_white)
        }
        
        draw_sprite(spr_unitSlot,0,x-20,y)
        draw_sprite(spr_unitSlot,0,x-15,y+15)
        draw_sprite(spr_unitSlot,0,x,y+20)
    }
}

with(Node)
{
    draw_set_colour(c_white)
    draw_set_halign(fa_middle)
    draw_set_font(fnt_tiny)

    if global.VIEW = VIEW_TYPE.RESOURCE or id = other.hover
    {
        var j = 0
        
        for (var i = 0; i &lt; global.NUM_RESOURCE_TYPES; i++){
            if(resources[i] != 0){
                iii = 0
                for(var ii = resources[i]; ii &gt; 0; ii--){
                    if ii &gt;= 5{
                    draw_sprite(spr_resourceIcons3, i, x+18+(14*iii), y-10+(14*j))
                    ii -= 4
                    }
                    else{
                    draw_sprite(spr_resourceIcons, i, x+18+(14*iii), y-10+(14*j))
                    }
                    
                    iii += 1
                }
                draw_set_halign(fa_left)
                j++
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
